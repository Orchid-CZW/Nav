<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.orchid</groupId>
    <artifactId>Nav</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>Nav</name>
    <description>导航-聚合服务</description>
    <packaging>pom</packaging>

    <modules>
        <module>nav-navigation</module>
        <module>renren-fast</module>
        <module>renren-generator</module>
        <module>nav-common</module>
        <module>nav-gateway</module>
    </modules>
    <!--  这里的属性会被子模块继承  -->
    <properties>
        <java.version>1.8</java.version>
        <nav.version>0.0.1-SNAPSHOT</nav.version>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
        <lombok.version>1.18.18</lombok.version>
        <mybatis-plus.version>3.4.2</mybatis-plus.version>
        <mysql.version>8.0.23</mysql.version>
        <http.components.version>4.4.13</http.components.version>
        <commons.lang.version>2.6</commons.lang.version>
        <elasticsearch.version>7.4.2</elasticsearch.version>
        <spring.boot.version>2.2.5.RELEASE</spring.boot.version>
        <spring.cloud.version>Hoxton.SR3</spring.cloud.version>
        <cloud.alibaba.version>2.2.1.RELEASE</cloud.alibaba.version>
        <knife4j.version>3.0.3</knife4j.version>
        <shiro.version>1.4.0</shiro.version>
    </properties>
    <!--  子模块继承父模块之后，提供作用：锁定版本 + 子模块不用再写 version  -->
    <dependencyManagement>
        <dependencies>
            <!-- Spring Boot 依赖版本管理 -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring.boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- Spring Cloud 依赖版本管理 -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring.cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- Spring Cloud Alibaba 依赖版本管理 -->
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>${cloud.alibaba.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- Spring Boot 启动器：Mybatis-Plus -->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-boot-starter</artifactId>
                <version>${mybatis-plus.version}</version>
            </dependency>
	        <!-- MySQL提供的JDBC驱动 -->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql.version}</version>
            </dependency>
            <!-- Apache提供的一组实现HTTP协议最基础的组件 -->
            <dependency>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>httpcore</artifactId>
                <version>${http.components.version}</version>
            </dependency>
	        <!-- Apache Commons-lang包提供了标准Java库函数里没有提供的Java核心类的操作方法,尤其是在String操作方法 -->
            <dependency>
                <groupId>commons-lang</groupId>
                <artifactId>commons-lang</artifactId>
                <version>${commons.lang.version}</version>
            </dependency>
            <!-- Lombok被用来消除Java类中的大量样板代码 -->
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
            </dependency>
            <!-- 重写覆盖 spring-boot-dependencies 中的依赖版本，Elasticsearch 服务端依赖 -->
            <dependency>
                <groupId>org.elasticsearch</groupId>
                <artifactId>elasticsearch</artifactId>
                <version>${elasticsearch.version}</version>
            </dependency>
            <!-- 重写覆盖 spring-boot-dependencies 中的依赖版本，Elasticsearch 客户端依赖 -->
            <dependency>
                <groupId>org.elasticsearch.client</groupId>
                <artifactId>elasticsearch-rest-client</artifactId>
                <version>${elasticsearch.version}</version>
            </dependency>
            <!-- 重写覆盖 spring-boot-dependencies 中的依赖版本，Elasticsearch 高级客户端依赖 -->
            <dependency>
                <groupId>org.elasticsearch.client</groupId>
                <artifactId>elasticsearch-rest-high-level-client</artifactId>
                <version>${elasticsearch.version}</version>
            </dependency>
            <!-- 目前使用Java生成接口文档的最佳实现: SwaggerV3(OpenAPI）+ Knife4J  -->
            <dependency>
                <groupId>com.github.xiaoymin</groupId>
                <artifactId>knife4j-spring-boot-starter</artifactId>
                <version>${knife4j.version}</version>
            </dependency>
            <!-- Apache提供的权限管理框架 -->
            <dependency>
                <groupId>org.apache.shiro</groupId>
                <artifactId>shiro-core</artifactId>
                <version>${shiro.version}</version>
            </dependency>
            <!-- 子模块版本管理 -->
            <dependency>
                <groupId>com.orchid</groupId>
                <artifactId>nav-common</artifactId>
                <version>${nav.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!--  这里的依赖会被子模块继承  -->
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>