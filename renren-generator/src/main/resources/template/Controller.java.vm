package ${package}.${moduleName}.controller;

import java.util.Arrays;
import java.util.Map;

//import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import ${package}.${moduleName}.entity.${className}Entity;
import ${package}.${moduleName}.service.${className}Service;
import ${mainPath}.common.utils.PageUtils;
import ${mainPath}.common.utils.R;

/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 *
 * @RestController
 *      组合@Controller和@ResponseBody，当你开发一个和页面交互数据的控制时，比如bbs-web的api接口需要此注解
 * @ResponseBody
 *      支持将返回值放在response体内，而不是返回一个页面。比如Ajax接口，可以用此注解返回数据而不是页面。此注解可以放置在返回值前或方法前
 * @Api
 *      作用在类上，表明是swagger资源，拥有两个属性：value、tags，value不能有多个值，生成的api文档会根据value或tags分类
 *      即这个controller中的所有接口生成的接口文档都会在tags这个list下；tags如果有多个值，会生成多个list,每个list都显示所有接口
 * @RequestMapping
 *      用来映射web请求(访问路径和参数)、处理类和方法，可以注解在类或方法上。注解在方法上的路径会继承注解在类上的路径。
 *      produces属性: 定制返回的response的媒体类型和字符集，或需返回值是json对象
 *      @RequestMapping(value="/api",produces="application/json;charset=UTF-8",method=RequestMethod.POST)
 */
@Api(value = "${className} Interfaces", tags = "${className} Interfaces")
@RestController
@RequestMapping("${moduleName}/${pathName}")
public class ${className}Controller {
    /**
    * 在默认情况下使用 @Autowired 注释进行自动注入时，Spring 容器中匹配的候选 Bean 数目必须有且仅有一个。
    * 当不能确定 Spring 容器中一定拥有某个类的 Bean 时，可以在需要自动注入该类 Bean 的地方使用 @Autowired(required = false)
    * 这等于告诉 Spring: 在找不到匹配 Bean 时也不报错
    */
    @Autowired
    private ${className}Service ${classname}Service;

    /**
     * 列表
     *
     * @ApiOperation
     *      作用在方法上，表示一个http请求的操作，value用于方法描述，notes用于提示内容，tags可以重新分组
     * @ApiParam
     *      作用在方法或参数上字段说明；表示对参数的添加元数据（说明或是否必填等），name 参数名，value参数说明，required 是否必填
     * @ApiModel 用对象来接收参数
     * @ApiProperty 用对象接收参数时，描述对象的一个字段
     * @ApiResponse HTTP响应其中1个描述
     * @ApiResponses HTTP响应整体描述
     * @ApiIgnore 使用该注解忽略这个API
     * @ApiError 发生错误返回的信息
     * @ApiImplicitParam 一个请求参数
     * @ApiImplicitParams 多个请求参数
     */
    @ApiOperation("Query ${className}List")
    @RequestMapping("/list")
    //@RequiresPermissions("${moduleName}:${pathName}:list")
    public R list(@RequestParam Map<String, Object> params){
        PageUtils page = ${classname}Service.queryPage(params);

        return R.ok().put("page", page);
    }


    /**
     * 信息
     */
    @RequestMapping("/info/{${pk.attrname}}")
    //@RequiresPermissions("${moduleName}:${pathName}:info")
    public R info(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}){
		${className}Entity ${classname} = ${classname}Service.getById(${pk.attrname});

        return R.ok().put("${classname}", ${classname});
    }

    /**
     * 保存
     */
    @RequestMapping("/save")
    //@RequiresPermissions("${moduleName}:${pathName}:save")
    public R save(@RequestBody ${className}Entity ${classname}){
		${classname}Service.save(${classname});

        return R.ok();
    }

    /**
     * 修改
     */
    @RequestMapping("/update")
    //@RequiresPermissions("${moduleName}:${pathName}:update")
    public R update(@RequestBody ${className}Entity ${classname}){
		${classname}Service.updateById(${classname});

        return R.ok();
    }

    /**
     * 删除
     */
    @RequestMapping("/delete")
    //@RequiresPermissions("${moduleName}:${pathName}:delete")
    public R delete(@RequestBody ${pk.attrType}[] ${pk.attrname}s){
		${classname}Service.removeByIds(Arrays.asList(${pk.attrname}s));

        return R.ok();
    }

}
